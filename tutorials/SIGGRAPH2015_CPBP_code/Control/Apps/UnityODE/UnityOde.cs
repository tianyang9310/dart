/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class UnityOde {

  private static void MarshalHelperWrite(ref IntPtr ptr, ref UnityEngine.Quaternion q)
  {
	Marshal.WriteInt32(ptr, Marshal.SizeOf(typeof(float)) * 0, BitConverter.ToInt32(BitConverter.GetBytes(q[3]), 0));
    Marshal.WriteInt32(ptr, Marshal.SizeOf(typeof(float)) * 1, BitConverter.ToInt32(BitConverter.GetBytes(q[0]), 0)); 
	Marshal.WriteInt32(ptr, Marshal.SizeOf(typeof(float)) * 2, BitConverter.ToInt32(BitConverter.GetBytes(q[1]), 0));
    Marshal.WriteInt32(ptr, Marshal.SizeOf(typeof(float)) * 3, BitConverter.ToInt32(BitConverter.GetBytes(q[2]), 0));
  }

  private static void MarshalHelperRead(ref IntPtr ptr, out UnityEngine.Quaternion q)
  {
    q = new UnityEngine.Quaternion(BitConverter.ToSingle(BitConverter.GetBytes(Marshal.ReadInt32(ptr, Marshal.SizeOf(typeof(float)) * 1)), 0),
	                               BitConverter.ToSingle(BitConverter.GetBytes(Marshal.ReadInt32(ptr, Marshal.SizeOf(typeof(float)) * 2)), 0),
								   BitConverter.ToSingle(BitConverter.GetBytes(Marshal.ReadInt32(ptr, Marshal.SizeOf(typeof(float)) * 3)), 0),
								   BitConverter.ToSingle(BitConverter.GetBytes(Marshal.ReadInt32(ptr, Marshal.SizeOf(typeof(float)) * 0)), 0));
  }

  public static int ALLTHREADS {
    get {
      int ret = UnityOdePINVOKE.ALLTHREADS_get();
      return ret;
    } 
  }

  public static void setCurrentOdeContext(int threadIdx) {
    UnityOdePINVOKE.setCurrentOdeContext(threadIdx);
  }

  public static bool initOde(int numThreads) {
    bool ret = UnityOdePINVOKE.initOde(numThreads);
    return ret;
  }

  public static bool uninitOde() {
    bool ret = UnityOdePINVOKE.uninitOde();
    return ret;
  }

  public static bool initialized() {
    bool ret = UnityOdePINVOKE.initialized();
    return ret;
  }

  public static void odeRandSetSeed(uint s) {
    UnityOdePINVOKE.odeRandSetSeed(s);
  }

  public static void allocateODEDataForThread() {
    UnityOdePINVOKE.allocateODEDataForThread();
  }

  public static void enableJointFeedback(bool enable) {
    UnityOdePINVOKE.enableJointFeedback(enable);
  }

  public static void odeBodyGetAccumulatedForce(int bodyId, int jointType, /* cstype output */ out UnityEngine.Vector3 result) {
    /* csin pre output */ IntPtr ptr_result = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Vector3)));
    try {
      UnityOdePINVOKE.odeBodyGetAccumulatedForce(bodyId, jointType, /* csin */ ptr_result);
    } finally {
      /* csin post output */ result = (UnityEngine.Vector3)Marshal.PtrToStructure(ptr_result, typeof(UnityEngine.Vector3));
      Marshal.FreeHGlobal(ptr_result);
    }
  }

  public static void odeBodyGetAccumulatedTorque(int bodyId, int jointType, /* cstype output */ out UnityEngine.Vector3 result) {
    /* csin pre output */ IntPtr ptr_result = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Vector3)));
    try {
      UnityOdePINVOKE.odeBodyGetAccumulatedTorque(bodyId, jointType, /* csin */ ptr_result);
    } finally {
      /* csin post output */ result = (UnityEngine.Vector3)Marshal.PtrToStructure(ptr_result, typeof(UnityEngine.Vector3));
      Marshal.FreeHGlobal(ptr_result);
    }
  }

  public static bool stepOde(float stepSize, bool breakOnErrors) {
    bool ret = UnityOdePINVOKE.stepOde(stepSize, breakOnErrors);
    return ret;
  }

  public static bool stepOdeFast(float stepSize) {
    bool ret = UnityOdePINVOKE.stepOdeFast(stepSize);
    return ret;
  }

  public static bool saveOdeState(int slot, int sourceContext) {
    bool ret = UnityOdePINVOKE.saveOdeState__SWIG_0(slot, sourceContext);
    return ret;
  }

  public static bool saveOdeState(int slot) {
    bool ret = UnityOdePINVOKE.saveOdeState__SWIG_1(slot);
    return ret;
  }

  public static bool saveOdeState() {
    bool ret = UnityOdePINVOKE.saveOdeState__SWIG_2();
    return ret;
  }

  public static bool restoreOdeState(int slot, bool breakOnErrors) {
    bool ret = UnityOdePINVOKE.restoreOdeState__SWIG_0(slot, breakOnErrors);
    return ret;
  }

  public static bool restoreOdeState(int slot) {
    bool ret = UnityOdePINVOKE.restoreOdeState__SWIG_1(slot);
    return ret;
  }

  public static bool restoreOdeState() {
    bool ret = UnityOdePINVOKE.restoreOdeState__SWIG_2();
    return ret;
  }

  public static bool saveOdeStateToFile(string filename, int slot, int extraFloatsAmount, SWIGTYPE_p_float extraFloats) {
    bool ret = UnityOdePINVOKE.saveOdeStateToFile(filename, slot, extraFloatsAmount, SWIGTYPE_p_float.getCPtr(extraFloats));
    return ret;
  }

  public static bool loadOdeStateFromFile(string filename, int slot, int extraFloatsAmount, SWIGTYPE_p_float extraFloats) {
    bool ret = UnityOdePINVOKE.loadOdeStateFromFile(filename, slot, extraFloatsAmount, SWIGTYPE_p_float.getCPtr(extraFloats));
    return ret;
  }

  public static void odeFixUnityRotation(int geomId) {
    UnityOdePINVOKE.odeFixUnityRotation(geomId);
  }

  public static void odeSetContactSoftCFM(float cfm) {
    UnityOdePINVOKE.odeSetContactSoftCFM(cfm);
  }

  public static void odeSetFrictionCoefficient(float mu) {
    UnityOdePINVOKE.odeSetFrictionCoefficient(mu);
  }

  public static int odeBodyCreate() {
    int ret = UnityOdePINVOKE.odeBodyCreate();
    return ret;
  }

  public static void odeBodyDestroy(int bodyId) {
    UnityOdePINVOKE.odeBodyDestroy(bodyId);
  }

  public static void odeBodySetPosition(int bodyId, float x, float y, float z) {
    UnityOdePINVOKE.odeBodySetPosition(bodyId, x, y, z);
  }

  public static bool odeBodySetQuaternion(int bodyId, /* cstype */ UnityEngine.Quaternion q, bool breakOnErrors) {
    /* csin pre */ IntPtr ptr_q = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Quaternion)));
    MarshalHelperWrite(ref ptr_q, ref q);
    try {
      bool ret = UnityOdePINVOKE.odeBodySetQuaternion(bodyId, /* csin */ ptr_q, breakOnErrors);
      return ret;
    } finally {
      /* csin post */ Marshal.FreeHGlobal(ptr_q);
    }
  }

  public static void odeBodySetLinearVel(int bodyId, float x, float y, float z) {
    UnityOdePINVOKE.odeBodySetLinearVel(bodyId, x, y, z);
  }

  public static void odeBodySetAngularVel(int bodyId, float x, float y, float z) {
    UnityOdePINVOKE.odeBodySetAngularVel(bodyId, x, y, z);
  }

  public static /* cstype out */ UnityEngine.Vector3 odeBodyGetPosition(int bodyId) {
    /* csout */ IntPtr ret = UnityOdePINVOKE.odeBodyGetPosition(bodyId);
	return (UnityEngine.Vector3)Marshal.PtrToStructure(ret, typeof(UnityEngine.Vector3));
  }

  public static /* cstype out */ UnityEngine.Quaternion odeBodyGetQuaternion(int bodyId) {
    /* csout */ IntPtr ptr = UnityOdePINVOKE.odeBodyGetQuaternion(bodyId);
	UnityEngine.Quaternion ret;
	MarshalHelperRead(ref ptr, out ret);
	return ret;
  }

  public static /* cstype out */ UnityEngine.Vector3 odeBodyGetLinearVel(int bodyId) {
    /* csout */ IntPtr ret = UnityOdePINVOKE.odeBodyGetLinearVel(bodyId);
	return (UnityEngine.Vector3)Marshal.PtrToStructure(ret, typeof(UnityEngine.Vector3));
  }

  public static /* cstype out */ UnityEngine.Vector3 odeBodyGetAngularVel(int bodyId) {
    /* csout */ IntPtr ret = UnityOdePINVOKE.odeBodyGetAngularVel(bodyId);
	return (UnityEngine.Vector3)Marshal.PtrToStructure(ret, typeof(UnityEngine.Vector3));
  }

  public static void odeBodySetMass(int bodyId, float mass) {
    UnityOdePINVOKE.odeBodySetMass(bodyId, mass);
  }

  public static float odeBodyGetMass(int bodyId) {
    float ret = UnityOdePINVOKE.odeBodyGetMass(bodyId);
    return ret;
  }

  public static void odeBodyAddForce(int bodyId, /* cstype */ UnityEngine.Vector3 f) {
    /* csin pre */ IntPtr ptr_f = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Vector3)));
    Marshal.StructureToPtr(f, ptr_f, false);
    try {
      UnityOdePINVOKE.odeBodyAddForce(bodyId, /* csin */ ptr_f);
    } finally {
      /* csin post */ Marshal.FreeHGlobal(ptr_f);
    }
  }

  public static void odeBodyAddTorque(int bodyId, /* cstype */ UnityEngine.Vector3 f) {
    /* csin pre */ IntPtr ptr_f = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Vector3)));
    Marshal.StructureToPtr(f, ptr_f, false);
    try {
      UnityOdePINVOKE.odeBodyAddTorque(bodyId, /* csin */ ptr_f);
    } finally {
      /* csin post */ Marshal.FreeHGlobal(ptr_f);
    }
  }

  public static void odeBodyAddRelForce(int bodyId, /* cstype */ UnityEngine.Vector3 f) {
    /* csin pre */ IntPtr ptr_f = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Vector3)));
    Marshal.StructureToPtr(f, ptr_f, false);
    try {
      UnityOdePINVOKE.odeBodyAddRelForce(bodyId, /* csin */ ptr_f);
    } finally {
      /* csin post */ Marshal.FreeHGlobal(ptr_f);
    }
  }

  public static void odeBodyAddRelTorque(int bodyId, /* cstype */ UnityEngine.Vector3 f) {
    /* csin pre */ IntPtr ptr_f = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Vector3)));
    Marshal.StructureToPtr(f, ptr_f, false);
    try {
      UnityOdePINVOKE.odeBodyAddRelTorque(bodyId, /* csin */ ptr_f);
    } finally {
      /* csin post */ Marshal.FreeHGlobal(ptr_f);
    }
  }

  public static void odeBodyAddForceAtPos(int bodyId, /* cstype */ UnityEngine.Vector3 f, /* cstype */ UnityEngine.Vector3 p) {
    /* csin pre */ IntPtr ptr_f = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Vector3)));
    Marshal.StructureToPtr(f, ptr_f, false);
    /* csin pre */ IntPtr ptr_p = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Vector3)));
    Marshal.StructureToPtr(p, ptr_p, false);
    try {
      UnityOdePINVOKE.odeBodyAddForceAtPos(bodyId, /* csin */ ptr_f, /* csin */ ptr_p);
    } finally {
      /* csin post */ Marshal.FreeHGlobal(ptr_f);
      /* csin post */ Marshal.FreeHGlobal(ptr_p);
    }
  }

  public static void odeBodyAddForceAtRelPos(int bodyId, /* cstype */ UnityEngine.Vector3 f, /* cstype */ UnityEngine.Vector3 p) {
    /* csin pre */ IntPtr ptr_f = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Vector3)));
    Marshal.StructureToPtr(f, ptr_f, false);
    /* csin pre */ IntPtr ptr_p = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Vector3)));
    Marshal.StructureToPtr(p, ptr_p, false);
    try {
      UnityOdePINVOKE.odeBodyAddForceAtRelPos(bodyId, /* csin */ ptr_f, /* csin */ ptr_p);
    } finally {
      /* csin post */ Marshal.FreeHGlobal(ptr_f);
      /* csin post */ Marshal.FreeHGlobal(ptr_p);
    }
  }

  public static void odeBodyAddRelForceAtPos(int bodyId, /* cstype */ UnityEngine.Vector3 f, /* cstype */ UnityEngine.Vector3 p) {
    /* csin pre */ IntPtr ptr_f = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Vector3)));
    Marshal.StructureToPtr(f, ptr_f, false);
    /* csin pre */ IntPtr ptr_p = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Vector3)));
    Marshal.StructureToPtr(p, ptr_p, false);
    try {
      UnityOdePINVOKE.odeBodyAddRelForceAtPos(bodyId, /* csin */ ptr_f, /* csin */ ptr_p);
    } finally {
      /* csin post */ Marshal.FreeHGlobal(ptr_f);
      /* csin post */ Marshal.FreeHGlobal(ptr_p);
    }
  }

  public static void odeBodyAddRelForceAtRelPos(int bodyId, /* cstype */ UnityEngine.Vector3 f, /* cstype */ UnityEngine.Vector3 p) {
    /* csin pre */ IntPtr ptr_f = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Vector3)));
    Marshal.StructureToPtr(f, ptr_f, false);
    /* csin pre */ IntPtr ptr_p = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Vector3)));
    Marshal.StructureToPtr(p, ptr_p, false);
    try {
      UnityOdePINVOKE.odeBodyAddRelForceAtRelPos(bodyId, /* csin */ ptr_f, /* csin */ ptr_p);
    } finally {
      /* csin post */ Marshal.FreeHGlobal(ptr_f);
      /* csin post */ Marshal.FreeHGlobal(ptr_p);
    }
  }

  public static void odeBodySetForce(int bodyId, /* cstype */ UnityEngine.Vector3 f) {
    /* csin pre */ IntPtr ptr_f = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Vector3)));
    Marshal.StructureToPtr(f, ptr_f, false);
    try {
      UnityOdePINVOKE.odeBodySetForce(bodyId, /* csin */ ptr_f);
    } finally {
      /* csin post */ Marshal.FreeHGlobal(ptr_f);
    }
  }

  public static void odeBodySetTorque(int bodyId, /* cstype */ UnityEngine.Vector3 f) {
    /* csin pre */ IntPtr ptr_f = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Vector3)));
    Marshal.StructureToPtr(f, ptr_f, false);
    try {
      UnityOdePINVOKE.odeBodySetTorque(bodyId, /* csin */ ptr_f);
    } finally {
      /* csin post */ Marshal.FreeHGlobal(ptr_f);
    }
  }

  public static /* cstype out */ UnityEngine.Vector3 odeBodyGetForce(int bodyId) {
    /* csout */ IntPtr ret = UnityOdePINVOKE.odeBodyGetForce(bodyId);
	return (UnityEngine.Vector3)Marshal.PtrToStructure(ret, typeof(UnityEngine.Vector3));
  }

  public static /* cstype out */ UnityEngine.Vector3 odeBodyGetTorque(int bodyId) {
    /* csout */ IntPtr ret = UnityOdePINVOKE.odeBodyGetTorque(bodyId);
	return (UnityEngine.Vector3)Marshal.PtrToStructure(ret, typeof(UnityEngine.Vector3));
  }

  public static bool odeBodySetDynamic(int bodyId) {
    bool ret = UnityOdePINVOKE.odeBodySetDynamic(bodyId);
    return ret;
  }

  public static bool odeBodySetKinematic(int bodyId) {
    bool ret = UnityOdePINVOKE.odeBodySetKinematic(bodyId);
    return ret;
  }

  public static bool odeBodyIsKinematic(int bodyId) {
    bool ret = UnityOdePINVOKE.odeBodyIsKinematic(bodyId);
    return ret;
  }

  public static void odeGeomDestroy(int geomId) {
    UnityOdePINVOKE.odeGeomDestroy(geomId);
  }

  public static bool odeGeomSetBody(int geomId, int bodyId) {
    bool ret = UnityOdePINVOKE.odeGeomSetBody(geomId, bodyId);
    return ret;
  }

  public static int odeGeomGetBody(int geomId) {
    int ret = UnityOdePINVOKE.odeGeomGetBody(geomId);
    return ret;
  }

  public static void odeGeomSetPosition(int geomId, float x, float y, float z) {
    UnityOdePINVOKE.odeGeomSetPosition(geomId, x, y, z);
  }

  public static void odeGeomSetQuaternion(int geomId, /* cstype */ UnityEngine.Quaternion q) {
    /* csin pre */ IntPtr ptr_q = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Quaternion)));
    MarshalHelperWrite(ref ptr_q, ref q);
    try {
      UnityOdePINVOKE.odeGeomSetQuaternion(geomId, /* csin */ ptr_q);
    } finally {
      /* csin post */ Marshal.FreeHGlobal(ptr_q);
    }
  }

  public static /* cstype out */ UnityEngine.Vector3 odeGeomGetPosition(int geomId) {
    /* csout */ IntPtr ret = UnityOdePINVOKE.odeGeomGetPosition(geomId);
	return (UnityEngine.Vector3)Marshal.PtrToStructure(ret, typeof(UnityEngine.Vector3));
  }

  public static void odeGeomGetQuaternion(int geomId, /* cstype output */ out UnityEngine.Quaternion result) {
    /* csin pre output */ IntPtr ptr_result = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Quaternion)));
    try {
      UnityOdePINVOKE.odeGeomGetQuaternion(geomId, /* csin */ ptr_result);
    } finally {
      /* csin post output */ MarshalHelperRead(ref ptr_result, out result);
      Marshal.FreeHGlobal(ptr_result);
    }
  }

  public static void odeGeomSetOffsetWorldPosition(int geomId, float x, float y, float z) {
    UnityOdePINVOKE.odeGeomSetOffsetWorldPosition(geomId, x, y, z);
  }

  public static void odeGeomSetCategoryBits(int geomId, uint bits) {
    UnityOdePINVOKE.odeGeomSetCategoryBits(geomId, bits);
  }

  public static void odeGeomSetCollideBits(int geomId, uint bits) {
    UnityOdePINVOKE.odeGeomSetCollideBits(geomId, bits);
  }

  public static uint odeGeomGetCategoryBits(int geomId) {
    uint ret = UnityOdePINVOKE.odeGeomGetCategoryBits(geomId);
    return ret;
  }

  public static uint odeGeomGetCollideBits(int geomId) {
    uint ret = UnityOdePINVOKE.odeGeomGetCollideBits(geomId);
    return ret;
  }

  public static int odeCreateSphere(float radius) {
    int ret = UnityOdePINVOKE.odeCreateSphere(radius);
    return ret;
  }

  public static void odeGeomSphereSetRadius(int geomId, float radius) {
    UnityOdePINVOKE.odeGeomSphereSetRadius(geomId, radius);
  }

  public static float odeGeomSphereGetRadius(int geomId) {
    float ret = UnityOdePINVOKE.odeGeomSphereGetRadius(geomId);
    return ret;
  }

  public static float dGeomSpherePointDepth(int geomId, float x, float y, float z) {
    float ret = UnityOdePINVOKE.dGeomSpherePointDepth(geomId, x, y, z);
    return ret;
  }

  public static int odeCreateBox(float lx, float ly, float lz) {
    int ret = UnityOdePINVOKE.odeCreateBox(lx, ly, lz);
    return ret;
  }

  public static void odeGeomBoxSetLengths(int geomId, float lx, float ly, float lz) {
    UnityOdePINVOKE.odeGeomBoxSetLengths(geomId, lx, ly, lz);
  }

  public static void odeGeomBoxGetLengths(int geomId, out float lx, out float ly, out float lz) {
    UnityOdePINVOKE.odeGeomBoxGetLengths(geomId, out lx, out ly, out lz);
  }

  public static float dGeomBoxPointDepth(int geomId, float x, float y, float z) {
    float ret = UnityOdePINVOKE.dGeomBoxPointDepth(geomId, x, y, z);
    return ret;
  }

  public static int odeCreatePlane(int spaceId, float a, float b, float c, float d) {
    int ret = UnityOdePINVOKE.odeCreatePlane(spaceId, a, b, c, d);
    return ret;
  }

  public static void odeGeomPlaneSetParams(int geomId, float a, float b, float c, float d) {
    UnityOdePINVOKE.odeGeomPlaneSetParams(geomId, a, b, c, d);
  }

  public static float odeGeomPlanePointDepth(int geomId, float x, float y, float z) {
    float ret = UnityOdePINVOKE.odeGeomPlanePointDepth(geomId, x, y, z);
    return ret;
  }

  public static int odeCreateHeightfield(SWIGTYPE_p_float heightData, float width, float depth, int widthSamples, int depthSamples, float scale, float offset, float thickness, int wrap) {
    int ret = UnityOdePINVOKE.odeCreateHeightfield(SWIGTYPE_p_float.getCPtr(heightData), width, depth, widthSamples, depthSamples, scale, offset, thickness, wrap);
    return ret;
  }

  public static int odeCreateCapsule(int spaceId, float radius, float length) {
    int ret = UnityOdePINVOKE.odeCreateCapsule(spaceId, radius, length);
    return ret;
  }

  public static void odeGeomCapsuleSetParams(int geomId, float radius, float length) {
    UnityOdePINVOKE.odeGeomCapsuleSetParams(geomId, radius, length);
  }

  public static void odeGeomCapsuleGetParams(int geomId, out float radius, out float length) {
    UnityOdePINVOKE.odeGeomCapsuleGetParams(geomId, out radius, out length);
  }

  public static float odeGeomCapsulePointDepth(int geomId, float x, float y, float z) {
    float ret = UnityOdePINVOKE.odeGeomCapsulePointDepth(geomId, x, y, z);
    return ret;
  }

  public static int odeJointCreateBall() {
    int ret = UnityOdePINVOKE.odeJointCreateBall();
    return ret;
  }

  public static int odeJointCreateHinge() {
    int ret = UnityOdePINVOKE.odeJointCreateHinge();
    return ret;
  }

  public static int odeJointCreateSlider() {
    int ret = UnityOdePINVOKE.odeJointCreateSlider();
    return ret;
  }

  public static int odeJointCreateUniversal() {
    int ret = UnityOdePINVOKE.odeJointCreateUniversal();
    return ret;
  }

  public static int odeJointCreateHinge2() {
    int ret = UnityOdePINVOKE.odeJointCreateHinge2();
    return ret;
  }

  public static int odeJointCreatePR() {
    int ret = UnityOdePINVOKE.odeJointCreatePR();
    return ret;
  }

  public static int odeJointCreatePU() {
    int ret = UnityOdePINVOKE.odeJointCreatePU();
    return ret;
  }

  public static int odeJointCreatePiston() {
    int ret = UnityOdePINVOKE.odeJointCreatePiston();
    return ret;
  }

  public static int odeJointCreateFixed() {
    int ret = UnityOdePINVOKE.odeJointCreateFixed();
    return ret;
  }

  public static int odeJointCreateAMotor() {
    int ret = UnityOdePINVOKE.odeJointCreateAMotor();
    return ret;
  }

  public static int odeJointCreateLMotor() {
    int ret = UnityOdePINVOKE.odeJointCreateLMotor();
    return ret;
  }

  public static int odeJointCreatePlane2D() {
    int ret = UnityOdePINVOKE.odeJointCreatePlane2D();
    return ret;
  }

  public static void odeJointAttach(int jointId, int bodyId1, int bodyId2) {
    UnityOdePINVOKE.odeJointAttach(jointId, bodyId1, bodyId2);
  }

  public static int odeJointGetType(int jointId) {
    int ret = UnityOdePINVOKE.odeJointGetType(jointId);
    return ret;
  }

  public static int odeJointGetBody(int jointId, int index) {
    int ret = UnityOdePINVOKE.odeJointGetBody(jointId, index);
    return ret;
  }

  public static void odeJointSetBallAnchor(int jointId, float x, float y, float z) {
    UnityOdePINVOKE.odeJointSetBallAnchor(jointId, x, y, z);
  }

  public static void odeJointGetBallAnchor(int jointId, out float x, out float y, out float z) {
    UnityOdePINVOKE.odeJointGetBallAnchor(jointId, out x, out y, out z);
  }

  public static void odeJointGetBallAnchor2(int jointId, out float x, out float y, out float z) {
    UnityOdePINVOKE.odeJointGetBallAnchor2(jointId, out x, out y, out z);
  }

  public static void odeJointSetHingeAnchor(int jointId, float x, float y, float z) {
    UnityOdePINVOKE.odeJointSetHingeAnchor(jointId, x, y, z);
  }

  public static void odeJointSetHingeAxis(int jointId, float x, float y, float z) {
    UnityOdePINVOKE.odeJointSetHingeAxis(jointId, x, y, z);
  }

  public static void odeJointGetHingeAnchor(int jointId, out float x, out float y, out float z) {
    UnityOdePINVOKE.odeJointGetHingeAnchor(jointId, out x, out y, out z);
  }

  public static void odeJointGetHingeAnchor2(int jointId, out float x, out float y, out float z) {
    UnityOdePINVOKE.odeJointGetHingeAnchor2(jointId, out x, out y, out z);
  }

  public static void odeJointGetHingeAxis(int jointId, out float x, out float y, out float z) {
    UnityOdePINVOKE.odeJointGetHingeAxis(jointId, out x, out y, out z);
  }

  public static float odeJointGetHingeAngle(int jointId) {
    float ret = UnityOdePINVOKE.odeJointGetHingeAngle(jointId);
    return ret;
  }

  public static float odeJointGetHingeAngleRate(int jointId) {
    float ret = UnityOdePINVOKE.odeJointGetHingeAngleRate(jointId);
    return ret;
  }

  public static float odeJointGetHingeAngleFromBodyRotations(int jointId, /* cstype */ UnityEngine.Quaternion q1, /* cstype */ UnityEngine.Quaternion q2) {
    /* csin pre */ IntPtr ptr_q1 = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Quaternion)));
    MarshalHelperWrite(ref ptr_q1, ref q1);
    /* csin pre */ IntPtr ptr_q2 = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Quaternion)));
    MarshalHelperWrite(ref ptr_q2, ref q2);
    try {
      float ret = UnityOdePINVOKE.odeJointGetHingeAngleFromBodyRotations(jointId, /* csin */ ptr_q1, /* csin */ ptr_q2);
      return ret;
    } finally {
      /* csin post */ Marshal.FreeHGlobal(ptr_q1);
      /* csin post */ Marshal.FreeHGlobal(ptr_q2);
    }
  }

  public static void odeJointSetAMotorMode(int jointId, int mode) {
    UnityOdePINVOKE.odeJointSetAMotorMode(jointId, mode);
  }

  public static int odeJointGetAMotorMode(int jointId) {
    int ret = UnityOdePINVOKE.odeJointGetAMotorMode(jointId);
    return ret;
  }

  public static void odeJointSetAMotorNumAxes(int jointId, int num) {
    UnityOdePINVOKE.odeJointSetAMotorNumAxes(jointId, num);
  }

  public static int odeJointGetAMotorNumAxes(int jointId) {
    int ret = UnityOdePINVOKE.odeJointGetAMotorNumAxes(jointId);
    return ret;
  }

  public static void odeJointSetAMotorAxis(int jointId, int anum, int rel, float x, float y, float z) {
    UnityOdePINVOKE.odeJointSetAMotorAxis(jointId, anum, rel, x, y, z);
  }

  public static void odeJointGetAMotorAxis(int jointId, int anum, out float x, out float y, out float z) {
    UnityOdePINVOKE.odeJointGetAMotorAxis(jointId, anum, out x, out y, out z);
  }

  public static int odeJointGetAMotorAxisRel(int jointId, int anum) {
    int ret = UnityOdePINVOKE.odeJointGetAMotorAxisRel(jointId, anum);
    return ret;
  }

  public static void odeJointSetAMotorAngle(int jointId, int anum, float angle) {
    UnityOdePINVOKE.odeJointSetAMotorAngle(jointId, anum, angle);
  }

  public static float odeJointGetAMotorAngle(int jointId, int anum) {
    float ret = UnityOdePINVOKE.odeJointGetAMotorAngle(jointId, anum);
    return ret;
  }

  public static float odeJointGetAMotorAngleRate(int jointId, int anum) {
    float ret = UnityOdePINVOKE.odeJointGetAMotorAngleRate(jointId, anum);
    return ret;
  }

  public static void odeJointGetAMotorAnglesFromBodyRotations(int jointId, /* cstype */ UnityEngine.Quaternion q1, /* cstype */ UnityEngine.Quaternion q2, /* cstype output */ out UnityEngine.Vector3 result) {
    /* csin pre */ IntPtr ptr_q1 = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Quaternion)));
    MarshalHelperWrite(ref ptr_q1, ref q1);
    /* csin pre */ IntPtr ptr_q2 = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Quaternion)));
    MarshalHelperWrite(ref ptr_q2, ref q2);
    /* csin pre output */ IntPtr ptr_result = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Vector3)));
    try {
      UnityOdePINVOKE.odeJointGetAMotorAnglesFromBodyRotations(jointId, /* csin */ ptr_q1, /* csin */ ptr_q2, /* csin */ ptr_result);
    } finally {
      /* csin post */ Marshal.FreeHGlobal(ptr_q1);
      /* csin post */ Marshal.FreeHGlobal(ptr_q2);
      /* csin post output */ result = (UnityEngine.Vector3)Marshal.PtrToStructure(ptr_result, typeof(UnityEngine.Vector3));
      Marshal.FreeHGlobal(ptr_result);
    }
  }

  public static void odeJointSetBallParam(int jointId, int parameter, float value) {
    UnityOdePINVOKE.odeJointSetBallParam(jointId, parameter, value);
  }

  public static void odeJointSetHingeParam(int jointId, int parameter, float value) {
    UnityOdePINVOKE.odeJointSetHingeParam(jointId, parameter, value);
  }

  public static void odeJointSetSliderParam(int jointId, int parameter, float value) {
    UnityOdePINVOKE.odeJointSetSliderParam(jointId, parameter, value);
  }

  public static void odeJointSetHinge2Param(int jointId, int parameter, float value) {
    UnityOdePINVOKE.odeJointSetHinge2Param(jointId, parameter, value);
  }

  public static void odeJointSetUniversalParam(int jointId, int parameter, float value) {
    UnityOdePINVOKE.odeJointSetUniversalParam(jointId, parameter, value);
  }

  public static void odeJointSetAMotorParam(int jointId, int parameter, float value) {
    UnityOdePINVOKE.odeJointSetAMotorParam(jointId, parameter, value);
  }

  public static void odeJointSetLMotorParam(int jointId, int parameter, float value) {
    UnityOdePINVOKE.odeJointSetLMotorParam(jointId, parameter, value);
  }

  public static void odeJointSetPRParam(int jointId, int parameter, float value) {
    UnityOdePINVOKE.odeJointSetPRParam(jointId, parameter, value);
  }

  public static void odeJointSetPUParam(int jointId, int parameter, float value) {
    UnityOdePINVOKE.odeJointSetPUParam(jointId, parameter, value);
  }

  public static void odeJointSetPistonParam(int jointId, int parameter, float value) {
    UnityOdePINVOKE.odeJointSetPistonParam(jointId, parameter, value);
  }

  public static float odeJointGetBallParam(int jointId, int parameter) {
    float ret = UnityOdePINVOKE.odeJointGetBallParam(jointId, parameter);
    return ret;
  }

  public static float odeJointGetHingeParam(int jointId, int parameter) {
    float ret = UnityOdePINVOKE.odeJointGetHingeParam(jointId, parameter);
    return ret;
  }

  public static float odeJointGetSliderParam(int jointId, int parameter) {
    float ret = UnityOdePINVOKE.odeJointGetSliderParam(jointId, parameter);
    return ret;
  }

  public static float odeJointGetHinge2Param(int jointId, int parameter) {
    float ret = UnityOdePINVOKE.odeJointGetHinge2Param(jointId, parameter);
    return ret;
  }

  public static float odeJointGetUniversalParam(int jointId, int parameter) {
    float ret = UnityOdePINVOKE.odeJointGetUniversalParam(jointId, parameter);
    return ret;
  }

  public static float odeJointGetAMotorParam(int jointId, int parameter) {
    float ret = UnityOdePINVOKE.odeJointGetAMotorParam(jointId, parameter);
    return ret;
  }

  public static float odeJointGetLMotorParam(int jointId, int parameter) {
    float ret = UnityOdePINVOKE.odeJointGetLMotorParam(jointId, parameter);
    return ret;
  }

  public static float odeJointGetPRParam(int jointId, int parameter) {
    float ret = UnityOdePINVOKE.odeJointGetPRParam(jointId, parameter);
    return ret;
  }

  public static float odeJointGetPUParam(int jointId, int parameter) {
    float ret = UnityOdePINVOKE.odeJointGetPUParam(jointId, parameter);
    return ret;
  }

  public static float odeJointGetPistonParam(int jointId, int parameter) {
    float ret = UnityOdePINVOKE.odeJointGetPistonParam(jointId, parameter);
    return ret;
  }

  public static void odeJointAddHingeTorque(int jointId, float torque) {
    UnityOdePINVOKE.odeJointAddHingeTorque(jointId, torque);
  }

  public static void odeJointAddUniversalTorques(int jointId, float torque1, float torque2) {
    UnityOdePINVOKE.odeJointAddUniversalTorques(jointId, torque1, torque2);
  }

  public static void odeJointAddSliderForce(int jointId, float force) {
    UnityOdePINVOKE.odeJointAddSliderForce(jointId, force);
  }

  public static void odeJointAddHinge2Torques(int jointId, float torque1, float torque2) {
    UnityOdePINVOKE.odeJointAddHinge2Torques(jointId, torque1, torque2);
  }

  public static void odeJointAddAMotorTorques(int jointId, float torque1, float torque2, float torque3) {
    UnityOdePINVOKE.odeJointAddAMotorTorques(jointId, torque1, torque2, torque3);
  }

  public static void odeJointSetFmax(int jointId, float fmax1, float fmax2, float fmax3) {
    UnityOdePINVOKE.odeJointSetFmax(jointId, fmax1, fmax2, fmax3);
  }

  public static void odeJointGetMotorAnglesDegrees(int jointId, /* cstype output */ out UnityEngine.Vector3 result) {
    /* csin pre output */ IntPtr ptr_result = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Vector3)));
    try {
      UnityOdePINVOKE.odeJointGetMotorAnglesDegrees(jointId, /* csin */ ptr_result);
    } finally {
      /* csin post output */ result = (UnityEngine.Vector3)Marshal.PtrToStructure(ptr_result, typeof(UnityEngine.Vector3));
      Marshal.FreeHGlobal(ptr_result);
    }
  }

  public static void odeJointSetAMotorVelocitiesDegreesPerSecond(int jointId, float vel1, float vel2, float vel3) {
    UnityOdePINVOKE.odeJointSetAMotorVelocitiesDegreesPerSecond(jointId, vel1, vel2, vel3);
  }

  public static void clampControlVelocitiesAtStops(int nJoints, SWIGTYPE_p_int jointIds, SWIGTYPE_p_float velocities) {
    UnityOdePINVOKE.clampControlVelocitiesAtStops(nJoints, SWIGTYPE_p_int.getCPtr(jointIds), SWIGTYPE_p_float.getCPtr(velocities));
  }

  public static void setMotorVelocities(int nJoints, SWIGTYPE_p_int jointIds, SWIGTYPE_p_float velocities) {
    UnityOdePINVOKE.setMotorVelocities(nJoints, SWIGTYPE_p_int.getCPtr(jointIds), SWIGTYPE_p_float.getCPtr(velocities));
  }

  public static void odeMassSetSphere(int bodyId, float density, float radius) {
    UnityOdePINVOKE.odeMassSetSphere(bodyId, density, radius);
  }

  public static void odeMassSetSphereTotal(int bodyId, float total_mass, float radius) {
    UnityOdePINVOKE.odeMassSetSphereTotal(bodyId, total_mass, radius);
  }

  public static void odeMassSetCapsule(int bodyId, float density, float radius, float length) {
    UnityOdePINVOKE.odeMassSetCapsule(bodyId, density, radius, length);
  }

  public static void odeMassSetCapsuleTotal(int bodyId, float total_mass, float radius, float length) {
    UnityOdePINVOKE.odeMassSetCapsuleTotal(bodyId, total_mass, radius, length);
  }

  public static void odeMassSetCylinder(int bodyId, float density, float radius, float length) {
    UnityOdePINVOKE.odeMassSetCylinder(bodyId, density, radius, length);
  }

  public static void odeMassSetCylinderTotal(int bodyId, float total_mass, float radius, float length) {
    UnityOdePINVOKE.odeMassSetCylinderTotal(bodyId, total_mass, radius, length);
  }

  public static void odeMassSetBox(int bodyId, float density, float lx, float ly, float lz) {
    UnityOdePINVOKE.odeMassSetBox(bodyId, density, lx, ly, lz);
  }

  public static void odeMassSetBoxTotal(int bodyId, float total_mass, float lx, float ly, float lz) {
    UnityOdePINVOKE.odeMassSetBoxTotal(bodyId, total_mass, lx, ly, lz);
  }

  public static float odeGetMaxContactSpeed(int bodyId) {
    float ret = UnityOdePINVOKE.odeGetMaxContactSpeed(bodyId);
    return ret;
  }

  public static void odeWorldSetGravity(float x, float y, float z) {
    UnityOdePINVOKE.odeWorldSetGravity(x, y, z);
  }

  public static void odeWorldSetCFM(float cfm) {
    UnityOdePINVOKE.odeWorldSetCFM(cfm);
  }

  public static void odeWorldSetERP(float erp) {
    UnityOdePINVOKE.odeWorldSetERP(erp);
  }

  public static void odeWorldSetContactMaxCorrectingVel(float vel) {
    UnityOdePINVOKE.odeWorldSetContactMaxCorrectingVel(vel);
  }

  public static void odeWorldSetContactSurfaceLayer(float depth) {
    UnityOdePINVOKE.odeWorldSetContactSurfaceLayer(depth);
  }

  public static int odeGetContactCount() {
    int ret = UnityOdePINVOKE.odeGetContactCount();
    return ret;
  }

  public static void odeGetContactInfo(int index, out int body1Id, out int body2Id, /* cstype output */ out UnityEngine.Vector3 out_pos, /* cstype output */ out UnityEngine.Vector3 out_normal, /* cstype output */ out UnityEngine.Vector3 out_vel) {
    /* csin pre output */ IntPtr ptr_out_pos = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Vector3)));
    /* csin pre output */ IntPtr ptr_out_normal = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Vector3)));
    /* csin pre output */ IntPtr ptr_out_vel = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Vector3)));
    try {
      UnityOdePINVOKE.odeGetContactInfo(index, out body1Id, out body2Id, /* csin */ ptr_out_pos, /* csin */ ptr_out_normal, /* csin */ ptr_out_vel);
    } finally {
      /* csin post output */ out_pos = (UnityEngine.Vector3)Marshal.PtrToStructure(ptr_out_pos, typeof(UnityEngine.Vector3));
      Marshal.FreeHGlobal(ptr_out_pos);
      /* csin post output */ out_normal = (UnityEngine.Vector3)Marshal.PtrToStructure(ptr_out_normal, typeof(UnityEngine.Vector3));
      Marshal.FreeHGlobal(ptr_out_normal);
      /* csin post output */ out_vel = (UnityEngine.Vector3)Marshal.PtrToStructure(ptr_out_vel, typeof(UnityEngine.Vector3));
      Marshal.FreeHGlobal(ptr_out_vel);
    }
  }

  public static int odeRaycast(float px, float py, float pz, float dx, float dy, float dz, float length, /* cstype output */ out UnityEngine.Vector3 out_pos, out float out_depth, uint collideBits, uint categoryBits) {
    /* csin pre output */ IntPtr ptr_out_pos = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Vector3)));
    try {
      int ret = UnityOdePINVOKE.odeRaycast__SWIG_0(px, py, pz, dx, dy, dz, length, /* csin */ ptr_out_pos, out out_depth, collideBits, categoryBits);
      return ret;
    } finally {
      /* csin post output */ out_pos = (UnityEngine.Vector3)Marshal.PtrToStructure(ptr_out_pos, typeof(UnityEngine.Vector3));
      Marshal.FreeHGlobal(ptr_out_pos);
    }
  }

  public static int odeRaycast(float px, float py, float pz, float dx, float dy, float dz, float length, /* cstype output */ out UnityEngine.Vector3 out_pos, out float out_depth, uint collideBits) {
    /* csin pre output */ IntPtr ptr_out_pos = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Vector3)));
    try {
      int ret = UnityOdePINVOKE.odeRaycast__SWIG_1(px, py, pz, dx, dy, dz, length, /* csin */ ptr_out_pos, out out_depth, collideBits);
      return ret;
    } finally {
      /* csin post output */ out_pos = (UnityEngine.Vector3)Marshal.PtrToStructure(ptr_out_pos, typeof(UnityEngine.Vector3));
      Marshal.FreeHGlobal(ptr_out_pos);
    }
  }

  public static int odeRaycast(float px, float py, float pz, float dx, float dy, float dz, float length, /* cstype output */ out UnityEngine.Vector3 out_pos, out float out_depth) {
    /* csin pre output */ IntPtr ptr_out_pos = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Vector3)));
    try {
      int ret = UnityOdePINVOKE.odeRaycast__SWIG_2(px, py, pz, dx, dy, dz, length, /* csin */ ptr_out_pos, out out_depth);
      return ret;
    } finally {
      /* csin post output */ out_pos = (UnityEngine.Vector3)Marshal.PtrToStructure(ptr_out_pos, typeof(UnityEngine.Vector3));
      Marshal.FreeHGlobal(ptr_out_pos);
    }
  }

  public static bool odeRaycastGeom(float px, float py, float pz, float dx, float dy, float dz, float length, /* cstype output */ out UnityEngine.Vector3 out_pos, out float out_depth, uint collideBits, uint categoryBits) {
    /* csin pre output */ IntPtr ptr_out_pos = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Vector3)));
    try {
      bool ret = UnityOdePINVOKE.odeRaycastGeom__SWIG_0(px, py, pz, dx, dy, dz, length, /* csin */ ptr_out_pos, out out_depth, collideBits, categoryBits);
      return ret;
    } finally {
      /* csin post output */ out_pos = (UnityEngine.Vector3)Marshal.PtrToStructure(ptr_out_pos, typeof(UnityEngine.Vector3));
      Marshal.FreeHGlobal(ptr_out_pos);
    }
  }

  public static bool odeRaycastGeom(float px, float py, float pz, float dx, float dy, float dz, float length, /* cstype output */ out UnityEngine.Vector3 out_pos, out float out_depth, uint collideBits) {
    /* csin pre output */ IntPtr ptr_out_pos = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Vector3)));
    try {
      bool ret = UnityOdePINVOKE.odeRaycastGeom__SWIG_1(px, py, pz, dx, dy, dz, length, /* csin */ ptr_out_pos, out out_depth, collideBits);
      return ret;
    } finally {
      /* csin post output */ out_pos = (UnityEngine.Vector3)Marshal.PtrToStructure(ptr_out_pos, typeof(UnityEngine.Vector3));
      Marshal.FreeHGlobal(ptr_out_pos);
    }
  }

  public static bool odeRaycastGeom(float px, float py, float pz, float dx, float dy, float dz, float length, /* cstype output */ out UnityEngine.Vector3 out_pos, out float out_depth) {
    /* csin pre output */ IntPtr ptr_out_pos = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Vector3)));
    try {
      bool ret = UnityOdePINVOKE.odeRaycastGeom__SWIG_2(px, py, pz, dx, dy, dz, length, /* csin */ ptr_out_pos, out out_depth);
      return ret;
    } finally {
      /* csin post output */ out_pos = (UnityEngine.Vector3)Marshal.PtrToStructure(ptr_out_pos, typeof(UnityEngine.Vector3));
      Marshal.FreeHGlobal(ptr_out_pos);
    }
  }

  public static bool odeGetContact(int body1Id, int body2Id, /* cstype output */ out UnityEngine.Vector3 out_pos, /* cstype output */ out UnityEngine.Vector3 out_normal, /* cstype output */ out UnityEngine.Vector3 out_vel) {
    /* csin pre output */ IntPtr ptr_out_pos = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Vector3)));
    /* csin pre output */ IntPtr ptr_out_normal = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Vector3)));
    /* csin pre output */ IntPtr ptr_out_vel = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UnityEngine.Vector3)));
    try {
      bool ret = UnityOdePINVOKE.odeGetContact(body1Id, body2Id, /* csin */ ptr_out_pos, /* csin */ ptr_out_normal, /* csin */ ptr_out_vel);
      return ret;
    } finally {
      /* csin post output */ out_pos = (UnityEngine.Vector3)Marshal.PtrToStructure(ptr_out_pos, typeof(UnityEngine.Vector3));
      Marshal.FreeHGlobal(ptr_out_pos);
      /* csin post output */ out_normal = (UnityEngine.Vector3)Marshal.PtrToStructure(ptr_out_normal, typeof(UnityEngine.Vector3));
      Marshal.FreeHGlobal(ptr_out_normal);
      /* csin post output */ out_vel = (UnityEngine.Vector3)Marshal.PtrToStructure(ptr_out_vel, typeof(UnityEngine.Vector3));
      Marshal.FreeHGlobal(ptr_out_vel);
    }
  }

}
