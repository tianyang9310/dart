/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_UnityOde(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_UnityOde(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_UnityOde(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


/* this code will be inserted to the generated UnityOde_wrap.cpp */
#include "UnityOde.h"

#include <ode/ode.h>



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT int SWIGSTDCALL CSharp_ALLTHREADS_get() {
  int jresult ;
  int result;
  
  result = (int)(int)ALLTHREADS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_setCurrentOdeContext(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  setCurrentOdeContext(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_initOde(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  bool result;
  
  arg1 = (int)jarg1; 
  result = (bool)initOde(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_uninitOde() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)uninitOde();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_initialized() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)initialized();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeRandSetSeed(unsigned long jarg1) {
  unsigned long arg1 ;
  
  arg1 = (unsigned long)jarg1; 
  odeRandSetSeed(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_allocateODEDataForThread() {
  allocateODEDataForThread();
}


SWIGEXPORT void SWIGSTDCALL CSharp_enableJointFeedback(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  enableJointFeedback(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeBodyGetAccumulatedForce(int jarg1, int jarg2, /* ctype */ OdeVector jarg3) {
  int arg1 ;
  int arg2 ;
  OdeVector arg3 = (OdeVector) 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  /* in */ arg3 = jarg3;
  odeBodyGetAccumulatedForce(arg1,arg2,arg3);
  /* argout */
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeBodyGetAccumulatedTorque(int jarg1, int jarg2, /* ctype */ OdeVector jarg3) {
  int arg1 ;
  int arg2 ;
  OdeVector arg3 = (OdeVector) 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  /* in */ arg3 = jarg3;
  odeBodyGetAccumulatedTorque(arg1,arg2,arg3);
  /* argout */
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_stepOde(float jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  float arg1 ;
  bool arg2 ;
  bool result;
  
  arg1 = (float)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)stepOde(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_stepOdeFast(float jarg1) {
  unsigned int jresult ;
  float arg1 ;
  bool result;
  
  arg1 = (float)jarg1; 
  result = (bool)stepOdeFast(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_saveOdeState__SWIG_0(int jarg1, int jarg2) {
  unsigned int jresult ;
  int arg1 ;
  int arg2 ;
  bool result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)saveOdeState(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_saveOdeState__SWIG_1(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  bool result;
  
  arg1 = (int)jarg1; 
  result = (bool)saveOdeState(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_saveOdeState__SWIG_2() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)saveOdeState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_restoreOdeState__SWIG_0(int jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  int arg1 ;
  bool arg2 ;
  bool result;
  
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)restoreOdeState(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_restoreOdeState__SWIG_1(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  bool result;
  
  arg1 = (int)jarg1; 
  result = (bool)restoreOdeState(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_restoreOdeState__SWIG_2() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)restoreOdeState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_saveOdeStateToFile(char * jarg1, int jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  float *arg4 = (float *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float *)jarg4; 
  result = (bool)saveOdeStateToFile((char const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_loadOdeStateFromFile(char * jarg1, int jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  float *arg4 = (float *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float *)jarg4; 
  result = (bool)loadOdeStateFromFile((char const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeFixUnityRotation(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  odeFixUnityRotation(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeSetContactSoftCFM(float jarg1) {
  float arg1 ;
  
  arg1 = (float)jarg1; 
  odeSetContactSoftCFM(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeSetFrictionCoefficient(float jarg1) {
  float arg1 ;
  
  arg1 = (float)jarg1; 
  odeSetFrictionCoefficient(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_odeBodyCreate() {
  int jresult ;
  int result;
  
  result = (int)odeBodyCreate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeBodyDestroy(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  odeBodyDestroy(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeBodySetPosition(int jarg1, float jarg2, float jarg3, float jarg4) {
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  odeBodySetPosition(arg1,arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_odeBodySetQuaternion(int jarg1, /* ctype */ ConstOdeQuaternion jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  int arg1 ;
  ConstOdeQuaternion arg2 = (ConstOdeQuaternion) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (int)jarg1; 
  /* in */ arg2 = jarg2;
  arg3 = jarg3 ? true : false; 
  result = (bool)odeBodySetQuaternion(arg1,(dReal const *)arg2,arg3);
  jresult = result; 
  /* argout */
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeBodySetLinearVel(int jarg1, float jarg2, float jarg3, float jarg4) {
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  odeBodySetLinearVel(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeBodySetAngularVel(int jarg1, float jarg2, float jarg3, float jarg4) {
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  odeBodySetAngularVel(arg1,arg2,arg3,arg4);
}


SWIGEXPORT /* ctype out */ ConstOdeVector SWIGSTDCALL CSharp_odeBodyGetPosition(int jarg1) {
  /* ctype out */ ConstOdeVector jresult ;
  int arg1 ;
  ConstOdeVector result;
  
  arg1 = (int)jarg1; 
  result = (ConstOdeVector)odeBodyGetPosition(arg1);
  /* out */ jresult = result;
  return jresult;
}


SWIGEXPORT /* ctype out */ ConstOdeQuaternion SWIGSTDCALL CSharp_odeBodyGetQuaternion(int jarg1) {
  /* ctype out */ ConstOdeQuaternion jresult ;
  int arg1 ;
  ConstOdeQuaternion result;
  
  arg1 = (int)jarg1; 
  result = (ConstOdeQuaternion)odeBodyGetQuaternion(arg1);
  /* out */ jresult = result;
  return jresult;
}


SWIGEXPORT /* ctype out */ ConstOdeVector SWIGSTDCALL CSharp_odeBodyGetLinearVel(int jarg1) {
  /* ctype out */ ConstOdeVector jresult ;
  int arg1 ;
  ConstOdeVector result;
  
  arg1 = (int)jarg1; 
  result = (ConstOdeVector)odeBodyGetLinearVel(arg1);
  /* out */ jresult = result;
  return jresult;
}


SWIGEXPORT /* ctype out */ ConstOdeVector SWIGSTDCALL CSharp_odeBodyGetAngularVel(int jarg1) {
  /* ctype out */ ConstOdeVector jresult ;
  int arg1 ;
  ConstOdeVector result;
  
  arg1 = (int)jarg1; 
  result = (ConstOdeVector)odeBodyGetAngularVel(arg1);
  /* out */ jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeBodySetMass(int jarg1, float jarg2) {
  int arg1 ;
  float arg2 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  odeBodySetMass(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_odeBodyGetMass(int jarg1) {
  float jresult ;
  int arg1 ;
  float result;
  
  arg1 = (int)jarg1; 
  result = (float)odeBodyGetMass(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeBodyAddForce(int jarg1, /* ctype */ ConstOdeVector jarg2) {
  int arg1 ;
  ConstOdeVector arg2 = (ConstOdeVector) 0 ;
  
  arg1 = (int)jarg1; 
  /* in */ arg2 = jarg2;
  odeBodyAddForce(arg1,(dReal const *)arg2);
  /* argout */
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeBodyAddTorque(int jarg1, /* ctype */ ConstOdeVector jarg2) {
  int arg1 ;
  ConstOdeVector arg2 = (ConstOdeVector) 0 ;
  
  arg1 = (int)jarg1; 
  /* in */ arg2 = jarg2;
  odeBodyAddTorque(arg1,(dReal const *)arg2);
  /* argout */
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeBodyAddRelForce(int jarg1, /* ctype */ ConstOdeVector jarg2) {
  int arg1 ;
  ConstOdeVector arg2 = (ConstOdeVector) 0 ;
  
  arg1 = (int)jarg1; 
  /* in */ arg2 = jarg2;
  odeBodyAddRelForce(arg1,(dReal const *)arg2);
  /* argout */
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeBodyAddRelTorque(int jarg1, /* ctype */ ConstOdeVector jarg2) {
  int arg1 ;
  ConstOdeVector arg2 = (ConstOdeVector) 0 ;
  
  arg1 = (int)jarg1; 
  /* in */ arg2 = jarg2;
  odeBodyAddRelTorque(arg1,(dReal const *)arg2);
  /* argout */
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeBodyAddForceAtPos(int jarg1, /* ctype */ ConstOdeVector jarg2, /* ctype */ ConstOdeVector jarg3) {
  int arg1 ;
  ConstOdeVector arg2 = (ConstOdeVector) 0 ;
  ConstOdeVector arg3 = (ConstOdeVector) 0 ;
  
  arg1 = (int)jarg1; 
  /* in */ arg2 = jarg2;
  /* in */ arg3 = jarg3;
  odeBodyAddForceAtPos(arg1,(dReal const *)arg2,(dReal const *)arg3);
  /* argout */
  /* argout */
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeBodyAddForceAtRelPos(int jarg1, /* ctype */ ConstOdeVector jarg2, /* ctype */ ConstOdeVector jarg3) {
  int arg1 ;
  ConstOdeVector arg2 = (ConstOdeVector) 0 ;
  ConstOdeVector arg3 = (ConstOdeVector) 0 ;
  
  arg1 = (int)jarg1; 
  /* in */ arg2 = jarg2;
  /* in */ arg3 = jarg3;
  odeBodyAddForceAtRelPos(arg1,(dReal const *)arg2,(dReal const *)arg3);
  /* argout */
  /* argout */
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeBodyAddRelForceAtPos(int jarg1, /* ctype */ ConstOdeVector jarg2, /* ctype */ ConstOdeVector jarg3) {
  int arg1 ;
  ConstOdeVector arg2 = (ConstOdeVector) 0 ;
  ConstOdeVector arg3 = (ConstOdeVector) 0 ;
  
  arg1 = (int)jarg1; 
  /* in */ arg2 = jarg2;
  /* in */ arg3 = jarg3;
  odeBodyAddRelForceAtPos(arg1,(dReal const *)arg2,(dReal const *)arg3);
  /* argout */
  /* argout */
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeBodyAddRelForceAtRelPos(int jarg1, /* ctype */ ConstOdeVector jarg2, /* ctype */ ConstOdeVector jarg3) {
  int arg1 ;
  ConstOdeVector arg2 = (ConstOdeVector) 0 ;
  ConstOdeVector arg3 = (ConstOdeVector) 0 ;
  
  arg1 = (int)jarg1; 
  /* in */ arg2 = jarg2;
  /* in */ arg3 = jarg3;
  odeBodyAddRelForceAtRelPos(arg1,(dReal const *)arg2,(dReal const *)arg3);
  /* argout */
  /* argout */
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeBodySetForce(int jarg1, /* ctype */ ConstOdeVector jarg2) {
  int arg1 ;
  ConstOdeVector arg2 = (ConstOdeVector) 0 ;
  
  arg1 = (int)jarg1; 
  /* in */ arg2 = jarg2;
  odeBodySetForce(arg1,(dReal const *)arg2);
  /* argout */
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeBodySetTorque(int jarg1, /* ctype */ ConstOdeVector jarg2) {
  int arg1 ;
  ConstOdeVector arg2 = (ConstOdeVector) 0 ;
  
  arg1 = (int)jarg1; 
  /* in */ arg2 = jarg2;
  odeBodySetTorque(arg1,(dReal const *)arg2);
  /* argout */
}


SWIGEXPORT /* ctype out */ ConstOdeVector SWIGSTDCALL CSharp_odeBodyGetForce(int jarg1) {
  /* ctype out */ ConstOdeVector jresult ;
  int arg1 ;
  ConstOdeVector result;
  
  arg1 = (int)jarg1; 
  result = (ConstOdeVector)odeBodyGetForce(arg1);
  /* out */ jresult = result;
  return jresult;
}


SWIGEXPORT /* ctype out */ ConstOdeVector SWIGSTDCALL CSharp_odeBodyGetTorque(int jarg1) {
  /* ctype out */ ConstOdeVector jresult ;
  int arg1 ;
  ConstOdeVector result;
  
  arg1 = (int)jarg1; 
  result = (ConstOdeVector)odeBodyGetTorque(arg1);
  /* out */ jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_odeBodySetDynamic(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  bool result;
  
  arg1 = (int)jarg1; 
  result = (bool)odeBodySetDynamic(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_odeBodySetKinematic(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  bool result;
  
  arg1 = (int)jarg1; 
  result = (bool)odeBodySetKinematic(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_odeBodyIsKinematic(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  bool result;
  
  arg1 = (int)jarg1; 
  result = (bool)odeBodyIsKinematic(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeGeomDestroy(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  odeGeomDestroy(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_odeGeomSetBody(int jarg1, int jarg2) {
  unsigned int jresult ;
  int arg1 ;
  int arg2 ;
  bool result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)odeGeomSetBody(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_odeGeomGetBody(int jarg1) {
  int jresult ;
  int arg1 ;
  int result;
  
  arg1 = (int)jarg1; 
  result = (int)odeGeomGetBody(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeGeomSetPosition(int jarg1, float jarg2, float jarg3, float jarg4) {
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  odeGeomSetPosition(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeGeomSetQuaternion(int jarg1, /* ctype */ ConstOdeQuaternion jarg2) {
  int arg1 ;
  ConstOdeQuaternion arg2 = (ConstOdeQuaternion) 0 ;
  
  arg1 = (int)jarg1; 
  /* in */ arg2 = jarg2;
  odeGeomSetQuaternion(arg1,(dReal const *)arg2);
  /* argout */
}


SWIGEXPORT /* ctype out */ ConstOdeVector SWIGSTDCALL CSharp_odeGeomGetPosition(int jarg1) {
  /* ctype out */ ConstOdeVector jresult ;
  int arg1 ;
  ConstOdeVector result;
  
  arg1 = (int)jarg1; 
  result = (ConstOdeVector)odeGeomGetPosition(arg1);
  /* out */ jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeGeomGetQuaternion(int jarg1, /* ctype */ OdeQuaternion jarg2) {
  int arg1 ;
  OdeQuaternion arg2 = (OdeQuaternion) 0 ;
  
  arg1 = (int)jarg1; 
  /* in */ arg2 = jarg2;
  odeGeomGetQuaternion(arg1,arg2);
  /* argout */
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeGeomSetOffsetWorldPosition(int jarg1, float jarg2, float jarg3, float jarg4) {
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  odeGeomSetOffsetWorldPosition(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeGeomSetCategoryBits(int jarg1, unsigned long jarg2) {
  int arg1 ;
  unsigned long arg2 ;
  
  arg1 = (int)jarg1; 
  arg2 = (unsigned long)jarg2; 
  odeGeomSetCategoryBits(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeGeomSetCollideBits(int jarg1, unsigned long jarg2) {
  int arg1 ;
  unsigned long arg2 ;
  
  arg1 = (int)jarg1; 
  arg2 = (unsigned long)jarg2; 
  odeGeomSetCollideBits(arg1,arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_odeGeomGetCategoryBits(int jarg1) {
  unsigned long jresult ;
  int arg1 ;
  unsigned long result;
  
  arg1 = (int)jarg1; 
  result = (unsigned long)odeGeomGetCategoryBits(arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_odeGeomGetCollideBits(int jarg1) {
  unsigned long jresult ;
  int arg1 ;
  unsigned long result;
  
  arg1 = (int)jarg1; 
  result = (unsigned long)odeGeomGetCollideBits(arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_odeCreateSphere(float jarg1) {
  int jresult ;
  float arg1 ;
  int result;
  
  arg1 = (float)jarg1; 
  result = (int)odeCreateSphere(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeGeomSphereSetRadius(int jarg1, float jarg2) {
  int arg1 ;
  float arg2 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  odeGeomSphereSetRadius(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_odeGeomSphereGetRadius(int jarg1) {
  float jresult ;
  int arg1 ;
  float result;
  
  arg1 = (int)jarg1; 
  result = (float)odeGeomSphereGetRadius(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_dGeomSpherePointDepth(int jarg1, float jarg2, float jarg3, float jarg4) {
  float jresult ;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float result;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (float)dGeomSpherePointDepth(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_odeCreateBox(float jarg1, float jarg2, float jarg3) {
  int jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  int result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (int)odeCreateBox(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeGeomBoxSetLengths(int jarg1, float jarg2, float jarg3, float jarg4) {
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  odeGeomBoxSetLengths(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeGeomBoxGetLengths(int jarg1, float * jarg2, float * jarg3, float * jarg4) {
  int arg1 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  odeGeomBoxGetLengths(arg1,*arg2,*arg3,*arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_dGeomBoxPointDepth(int jarg1, float jarg2, float jarg3, float jarg4) {
  float jresult ;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float result;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (float)dGeomBoxPointDepth(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_odeCreatePlane(int jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  int jresult ;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (int)odeCreatePlane(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeGeomPlaneSetParams(int jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  odeGeomPlaneSetParams(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT float SWIGSTDCALL CSharp_odeGeomPlanePointDepth(int jarg1, float jarg2, float jarg3, float jarg4) {
  float jresult ;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float result;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (float)odeGeomPlanePointDepth(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_odeCreateHeightfield(void * jarg1, float jarg2, float jarg3, int jarg4, int jarg5, float jarg6, float jarg7, float jarg8, int jarg9) {
  int jresult ;
  float *arg1 = (float *) 0 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  int arg9 ;
  int result;
  
  arg1 = (float *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (int)jarg9; 
  result = (int)odeCreateHeightfield((float const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_odeCreateCapsule(int jarg1, float jarg2, float jarg3) {
  int jresult ;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (int)odeCreateCapsule(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeGeomCapsuleSetParams(int jarg1, float jarg2, float jarg3) {
  int arg1 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  odeGeomCapsuleSetParams(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeGeomCapsuleGetParams(int jarg1, float * jarg2, float * jarg3) {
  int arg1 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  odeGeomCapsuleGetParams(arg1,*arg2,*arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_odeGeomCapsulePointDepth(int jarg1, float jarg2, float jarg3, float jarg4) {
  float jresult ;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float result;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (float)odeGeomCapsulePointDepth(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_odeJointCreateBall() {
  int jresult ;
  int result;
  
  result = (int)odeJointCreateBall();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_odeJointCreateHinge() {
  int jresult ;
  int result;
  
  result = (int)odeJointCreateHinge();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_odeJointCreateSlider() {
  int jresult ;
  int result;
  
  result = (int)odeJointCreateSlider();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_odeJointCreateUniversal() {
  int jresult ;
  int result;
  
  result = (int)odeJointCreateUniversal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_odeJointCreateHinge2() {
  int jresult ;
  int result;
  
  result = (int)odeJointCreateHinge2();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_odeJointCreatePR() {
  int jresult ;
  int result;
  
  result = (int)odeJointCreatePR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_odeJointCreatePU() {
  int jresult ;
  int result;
  
  result = (int)odeJointCreatePU();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_odeJointCreatePiston() {
  int jresult ;
  int result;
  
  result = (int)odeJointCreatePiston();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_odeJointCreateFixed() {
  int jresult ;
  int result;
  
  result = (int)odeJointCreateFixed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_odeJointCreateAMotor() {
  int jresult ;
  int result;
  
  result = (int)odeJointCreateAMotor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_odeJointCreateLMotor() {
  int jresult ;
  int result;
  
  result = (int)odeJointCreateLMotor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_odeJointCreatePlane2D() {
  int jresult ;
  int result;
  
  result = (int)odeJointCreatePlane2D();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeJointAttach(int jarg1, int jarg2, int jarg3) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  odeJointAttach(arg1,arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_odeJointGetType(int jarg1) {
  int jresult ;
  int arg1 ;
  int result;
  
  arg1 = (int)jarg1; 
  result = (int)odeJointGetType(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_odeJointGetBody(int jarg1, int jarg2) {
  int jresult ;
  int arg1 ;
  int arg2 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)odeJointGetBody(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeJointSetBallAnchor(int jarg1, float jarg2, float jarg3, float jarg4) {
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  odeJointSetBallAnchor(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeJointGetBallAnchor(int jarg1, float * jarg2, float * jarg3, float * jarg4) {
  int arg1 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  odeJointGetBallAnchor(arg1,*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeJointGetBallAnchor2(int jarg1, float * jarg2, float * jarg3, float * jarg4) {
  int arg1 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  odeJointGetBallAnchor2(arg1,*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeJointSetHingeAnchor(int jarg1, float jarg2, float jarg3, float jarg4) {
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  odeJointSetHingeAnchor(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeJointSetHingeAxis(int jarg1, float jarg2, float jarg3, float jarg4) {
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  odeJointSetHingeAxis(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeJointGetHingeAnchor(int jarg1, float * jarg2, float * jarg3, float * jarg4) {
  int arg1 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  odeJointGetHingeAnchor(arg1,*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeJointGetHingeAnchor2(int jarg1, float * jarg2, float * jarg3, float * jarg4) {
  int arg1 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  odeJointGetHingeAnchor2(arg1,*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeJointGetHingeAxis(int jarg1, float * jarg2, float * jarg3, float * jarg4) {
  int arg1 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  odeJointGetHingeAxis(arg1,*arg2,*arg3,*arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_odeJointGetHingeAngle(int jarg1) {
  float jresult ;
  int arg1 ;
  float result;
  
  arg1 = (int)jarg1; 
  result = (float)odeJointGetHingeAngle(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_odeJointGetHingeAngleRate(int jarg1) {
  float jresult ;
  int arg1 ;
  float result;
  
  arg1 = (int)jarg1; 
  result = (float)odeJointGetHingeAngleRate(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_odeJointGetHingeAngleFromBodyRotations(int jarg1, /* ctype */ ConstOdeQuaternion jarg2, /* ctype */ ConstOdeQuaternion jarg3) {
  float jresult ;
  int arg1 ;
  ConstOdeQuaternion arg2 = (ConstOdeQuaternion) 0 ;
  ConstOdeQuaternion arg3 = (ConstOdeQuaternion) 0 ;
  float result;
  
  arg1 = (int)jarg1; 
  /* in */ arg2 = jarg2;
  /* in */ arg3 = jarg3;
  result = (float)odeJointGetHingeAngleFromBodyRotations(arg1,(dReal const *)arg2,(dReal const *)arg3);
  jresult = result; 
  /* argout */
  /* argout */
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeJointSetAMotorMode(int jarg1, int jarg2) {
  int arg1 ;
  int arg2 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  odeJointSetAMotorMode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_odeJointGetAMotorMode(int jarg1) {
  int jresult ;
  int arg1 ;
  int result;
  
  arg1 = (int)jarg1; 
  result = (int)odeJointGetAMotorMode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeJointSetAMotorNumAxes(int jarg1, int jarg2) {
  int arg1 ;
  int arg2 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  odeJointSetAMotorNumAxes(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_odeJointGetAMotorNumAxes(int jarg1) {
  int jresult ;
  int arg1 ;
  int result;
  
  arg1 = (int)jarg1; 
  result = (int)odeJointGetAMotorNumAxes(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeJointSetAMotorAxis(int jarg1, int jarg2, int jarg3, float jarg4, float jarg5, float jarg6) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  odeJointSetAMotorAxis(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeJointGetAMotorAxis(int jarg1, int jarg2, float * jarg3, float * jarg4, float * jarg5) {
  int arg1 ;
  int arg2 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (float *)jarg5; 
  odeJointGetAMotorAxis(arg1,arg2,*arg3,*arg4,*arg5);
}


SWIGEXPORT int SWIGSTDCALL CSharp_odeJointGetAMotorAxisRel(int jarg1, int jarg2) {
  int jresult ;
  int arg1 ;
  int arg2 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)odeJointGetAMotorAxisRel(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeJointSetAMotorAngle(int jarg1, int jarg2, float jarg3) {
  int arg1 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  odeJointSetAMotorAngle(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_odeJointGetAMotorAngle(int jarg1, int jarg2) {
  float jresult ;
  int arg1 ;
  int arg2 ;
  float result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)odeJointGetAMotorAngle(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_odeJointGetAMotorAngleRate(int jarg1, int jarg2) {
  float jresult ;
  int arg1 ;
  int arg2 ;
  float result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)odeJointGetAMotorAngleRate(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeJointGetAMotorAnglesFromBodyRotations(int jarg1, /* ctype */ ConstOdeQuaternion jarg2, /* ctype */ ConstOdeQuaternion jarg3, /* ctype */ OdeVector jarg4) {
  int arg1 ;
  ConstOdeQuaternion arg2 = (ConstOdeQuaternion) 0 ;
  ConstOdeQuaternion arg3 = (ConstOdeQuaternion) 0 ;
  OdeVector arg4 = (OdeVector) 0 ;
  
  arg1 = (int)jarg1; 
  /* in */ arg2 = jarg2;
  /* in */ arg3 = jarg3;
  /* in */ arg4 = jarg4;
  odeJointGetAMotorAnglesFromBodyRotations(arg1,(dReal const *)arg2,(dReal const *)arg3,arg4);
  /* argout */
  /* argout */
  /* argout */
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeJointSetBallParam(int jarg1, int jarg2, float jarg3) {
  int arg1 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  odeJointSetBallParam(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeJointSetHingeParam(int jarg1, int jarg2, float jarg3) {
  int arg1 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  odeJointSetHingeParam(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeJointSetSliderParam(int jarg1, int jarg2, float jarg3) {
  int arg1 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  odeJointSetSliderParam(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeJointSetHinge2Param(int jarg1, int jarg2, float jarg3) {
  int arg1 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  odeJointSetHinge2Param(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeJointSetUniversalParam(int jarg1, int jarg2, float jarg3) {
  int arg1 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  odeJointSetUniversalParam(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeJointSetAMotorParam(int jarg1, int jarg2, float jarg3) {
  int arg1 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  odeJointSetAMotorParam(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeJointSetLMotorParam(int jarg1, int jarg2, float jarg3) {
  int arg1 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  odeJointSetLMotorParam(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeJointSetPRParam(int jarg1, int jarg2, float jarg3) {
  int arg1 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  odeJointSetPRParam(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeJointSetPUParam(int jarg1, int jarg2, float jarg3) {
  int arg1 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  odeJointSetPUParam(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeJointSetPistonParam(int jarg1, int jarg2, float jarg3) {
  int arg1 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  odeJointSetPistonParam(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_odeJointGetBallParam(int jarg1, int jarg2) {
  float jresult ;
  int arg1 ;
  int arg2 ;
  float result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)odeJointGetBallParam(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_odeJointGetHingeParam(int jarg1, int jarg2) {
  float jresult ;
  int arg1 ;
  int arg2 ;
  float result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)odeJointGetHingeParam(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_odeJointGetSliderParam(int jarg1, int jarg2) {
  float jresult ;
  int arg1 ;
  int arg2 ;
  float result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)odeJointGetSliderParam(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_odeJointGetHinge2Param(int jarg1, int jarg2) {
  float jresult ;
  int arg1 ;
  int arg2 ;
  float result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)odeJointGetHinge2Param(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_odeJointGetUniversalParam(int jarg1, int jarg2) {
  float jresult ;
  int arg1 ;
  int arg2 ;
  float result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)odeJointGetUniversalParam(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_odeJointGetAMotorParam(int jarg1, int jarg2) {
  float jresult ;
  int arg1 ;
  int arg2 ;
  float result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)odeJointGetAMotorParam(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_odeJointGetLMotorParam(int jarg1, int jarg2) {
  float jresult ;
  int arg1 ;
  int arg2 ;
  float result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)odeJointGetLMotorParam(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_odeJointGetPRParam(int jarg1, int jarg2) {
  float jresult ;
  int arg1 ;
  int arg2 ;
  float result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)odeJointGetPRParam(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_odeJointGetPUParam(int jarg1, int jarg2) {
  float jresult ;
  int arg1 ;
  int arg2 ;
  float result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)odeJointGetPUParam(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_odeJointGetPistonParam(int jarg1, int jarg2) {
  float jresult ;
  int arg1 ;
  int arg2 ;
  float result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)odeJointGetPistonParam(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeJointAddHingeTorque(int jarg1, float jarg2) {
  int arg1 ;
  float arg2 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  odeJointAddHingeTorque(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeJointAddUniversalTorques(int jarg1, float jarg2, float jarg3) {
  int arg1 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  odeJointAddUniversalTorques(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeJointAddSliderForce(int jarg1, float jarg2) {
  int arg1 ;
  float arg2 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  odeJointAddSliderForce(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeJointAddHinge2Torques(int jarg1, float jarg2, float jarg3) {
  int arg1 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  odeJointAddHinge2Torques(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeJointAddAMotorTorques(int jarg1, float jarg2, float jarg3, float jarg4) {
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  odeJointAddAMotorTorques(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeJointSetFmax(int jarg1, float jarg2, float jarg3, float jarg4) {
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  odeJointSetFmax(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeJointGetMotorAnglesDegrees(int jarg1, /* ctype */ OdeVector jarg2) {
  int arg1 ;
  OdeVector arg2 = (OdeVector) 0 ;
  
  arg1 = (int)jarg1; 
  /* in */ arg2 = jarg2;
  odeJointGetMotorAnglesDegrees(arg1,arg2);
  /* argout */
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeJointSetAMotorVelocitiesDegreesPerSecond(int jarg1, float jarg2, float jarg3, float jarg4) {
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  odeJointSetAMotorVelocitiesDegreesPerSecond(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_clampControlVelocitiesAtStops(int jarg1, void * jarg2, void * jarg3) {
  int arg1 ;
  int *arg2 = (int *) 0 ;
  float *arg3 = (float *) 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (float *)jarg3; 
  clampControlVelocitiesAtStops(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_setMotorVelocities(int jarg1, void * jarg2, void * jarg3) {
  int arg1 ;
  int *arg2 = (int *) 0 ;
  float *arg3 = (float *) 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (float *)jarg3; 
  setMotorVelocities(arg1,arg2,(float const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeMassSetSphere(int jarg1, float jarg2, float jarg3) {
  int arg1 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  odeMassSetSphere(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeMassSetSphereTotal(int jarg1, float jarg2, float jarg3) {
  int arg1 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  odeMassSetSphereTotal(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeMassSetCapsule(int jarg1, float jarg2, float jarg3, float jarg4) {
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  odeMassSetCapsule(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeMassSetCapsuleTotal(int jarg1, float jarg2, float jarg3, float jarg4) {
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  odeMassSetCapsuleTotal(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeMassSetCylinder(int jarg1, float jarg2, float jarg3, float jarg4) {
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  odeMassSetCylinder(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeMassSetCylinderTotal(int jarg1, float jarg2, float jarg3, float jarg4) {
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  odeMassSetCylinderTotal(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeMassSetBox(int jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  odeMassSetBox(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeMassSetBoxTotal(int jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  odeMassSetBoxTotal(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT float SWIGSTDCALL CSharp_odeGetMaxContactSpeed(int jarg1) {
  float jresult ;
  int arg1 ;
  float result;
  
  arg1 = (int)jarg1; 
  result = (float)odeGetMaxContactSpeed(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeWorldSetGravity(float jarg1, float jarg2, float jarg3) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  odeWorldSetGravity(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeWorldSetCFM(float jarg1) {
  float arg1 ;
  
  arg1 = (float)jarg1; 
  odeWorldSetCFM(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeWorldSetERP(float jarg1) {
  float arg1 ;
  
  arg1 = (float)jarg1; 
  odeWorldSetERP(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeWorldSetContactMaxCorrectingVel(float jarg1) {
  float arg1 ;
  
  arg1 = (float)jarg1; 
  odeWorldSetContactMaxCorrectingVel(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeWorldSetContactSurfaceLayer(float jarg1) {
  float arg1 ;
  
  arg1 = (float)jarg1; 
  odeWorldSetContactSurfaceLayer(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_odeGetContactCount() {
  int jresult ;
  int result;
  
  result = (int)odeGetContactCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_odeGetContactInfo(int jarg1, int * jarg2, int * jarg3, /* ctype */ OdeVector jarg4, /* ctype */ OdeVector jarg5, /* ctype */ OdeVector jarg6) {
  int arg1 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  OdeVector arg4 = (OdeVector) 0 ;
  OdeVector arg5 = (OdeVector) 0 ;
  OdeVector arg6 = (OdeVector) 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  /* in */ arg4 = jarg4;
  /* in */ arg5 = jarg5;
  /* in */ arg6 = jarg6;
  odeGetContactInfo(arg1,*arg2,*arg3,arg4,arg5,arg6);
  /* argout */
  /* argout */
  /* argout */
}


SWIGEXPORT int SWIGSTDCALL CSharp_odeRaycast__SWIG_0(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, /* ctype */ OdeVector jarg8, float * jarg9, unsigned long jarg10, unsigned long jarg11) {
  int jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  OdeVector arg8 = (OdeVector) 0 ;
  float *arg9 = 0 ;
  unsigned long arg10 ;
  unsigned long arg11 ;
  int result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  /* in */ arg8 = jarg8;
  arg9 = (float *)jarg9; 
  arg10 = (unsigned long)jarg10; 
  arg11 = (unsigned long)jarg11; 
  result = (int)odeRaycast(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,*arg9,arg10,arg11);
  jresult = result; 
  /* argout */
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_odeRaycast__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, /* ctype */ OdeVector jarg8, float * jarg9, unsigned long jarg10) {
  int jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  OdeVector arg8 = (OdeVector) 0 ;
  float *arg9 = 0 ;
  unsigned long arg10 ;
  int result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  /* in */ arg8 = jarg8;
  arg9 = (float *)jarg9; 
  arg10 = (unsigned long)jarg10; 
  result = (int)odeRaycast(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,*arg9,arg10);
  jresult = result; 
  /* argout */
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_odeRaycast__SWIG_2(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, /* ctype */ OdeVector jarg8, float * jarg9) {
  int jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  OdeVector arg8 = (OdeVector) 0 ;
  float *arg9 = 0 ;
  int result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  /* in */ arg8 = jarg8;
  arg9 = (float *)jarg9; 
  result = (int)odeRaycast(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,*arg9);
  jresult = result; 
  /* argout */
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_odeRaycastGeom__SWIG_0(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, /* ctype */ OdeVector jarg8, float * jarg9, unsigned long jarg10, unsigned long jarg11) {
  unsigned int jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  OdeVector arg8 = (OdeVector) 0 ;
  float *arg9 = 0 ;
  unsigned long arg10 ;
  unsigned long arg11 ;
  bool result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  /* in */ arg8 = jarg8;
  arg9 = (float *)jarg9; 
  arg10 = (unsigned long)jarg10; 
  arg11 = (unsigned long)jarg11; 
  result = (bool)odeRaycastGeom(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,*arg9,arg10,arg11);
  jresult = result; 
  /* argout */
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_odeRaycastGeom__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, /* ctype */ OdeVector jarg8, float * jarg9, unsigned long jarg10) {
  unsigned int jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  OdeVector arg8 = (OdeVector) 0 ;
  float *arg9 = 0 ;
  unsigned long arg10 ;
  bool result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  /* in */ arg8 = jarg8;
  arg9 = (float *)jarg9; 
  arg10 = (unsigned long)jarg10; 
  result = (bool)odeRaycastGeom(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,*arg9,arg10);
  jresult = result; 
  /* argout */
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_odeRaycastGeom__SWIG_2(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, /* ctype */ OdeVector jarg8, float * jarg9) {
  unsigned int jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  OdeVector arg8 = (OdeVector) 0 ;
  float *arg9 = 0 ;
  bool result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  /* in */ arg8 = jarg8;
  arg9 = (float *)jarg9; 
  result = (bool)odeRaycastGeom(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,*arg9);
  jresult = result; 
  /* argout */
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_odeGetContact(int jarg1, int jarg2, /* ctype */ OdeVector jarg3, /* ctype */ OdeVector jarg4, /* ctype */ OdeVector jarg5) {
  unsigned int jresult ;
  int arg1 ;
  int arg2 ;
  OdeVector arg3 = (OdeVector) 0 ;
  OdeVector arg4 = (OdeVector) 0 ;
  OdeVector arg5 = (OdeVector) 0 ;
  bool result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  /* in */ arg3 = jarg3;
  /* in */ arg4 = jarg4;
  /* in */ arg5 = jarg5;
  result = (bool)odeGetContact(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  /* argout */
  /* argout */
  /* argout */
  return jresult;
}


#ifdef __cplusplus
}
#endif

