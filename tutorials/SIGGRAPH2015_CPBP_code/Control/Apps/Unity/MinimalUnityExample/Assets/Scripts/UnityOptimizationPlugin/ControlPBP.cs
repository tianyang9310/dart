/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class ControlPBP : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ControlPBP(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(ControlPBP obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~ControlPBP() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          UnityOptimizationPluginPINVOKE.delete_ControlPBP(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public ControlPBP() : this(UnityOptimizationPluginPINVOKE.new_ControlPBP(), true) {
  }

  public void init(int nParticles, int nSteps, int nStateDimensions, int nControlDimensions, SWIGTYPE_p_float controlMinValues, SWIGTYPE_p_float controlMaxValues, SWIGTYPE_p_float controlMean, SWIGTYPE_p_float controlPriorStd, SWIGTYPE_p_float controlDiffPriorStd, SWIGTYPE_p_float controlDiffDiffPriorStd, float controlMutationStdScale, SWIGTYPE_p_float stateKernelStd) {
    UnityOptimizationPluginPINVOKE.ControlPBP_init(swigCPtr, nParticles, nSteps, nStateDimensions, nControlDimensions, SWIGTYPE_p_float.getCPtr(controlMinValues), SWIGTYPE_p_float.getCPtr(controlMaxValues), SWIGTYPE_p_float.getCPtr(controlMean), SWIGTYPE_p_float.getCPtr(controlPriorStd), SWIGTYPE_p_float.getCPtr(controlDiffPriorStd), SWIGTYPE_p_float.getCPtr(controlDiffDiffPriorStd), controlMutationStdScale, SWIGTYPE_p_float.getCPtr(stateKernelStd));
  }

  public virtual void update(SWIGTYPE_p_float currentState, SWIGTYPE_p_f_int_p_q_const__float_p_q_const__float_p_float__void transitionFwd, SWIGTYPE_p_f_int_p_q_const__float__double statePotential, SWIGTYPE_p_f___void onStepDone) {
    UnityOptimizationPluginPINVOKE.ControlPBP_update__SWIG_0(swigCPtr, SWIGTYPE_p_float.getCPtr(currentState), SWIGTYPE_p_f_int_p_q_const__float_p_q_const__float_p_float__void.getCPtr(transitionFwd), SWIGTYPE_p_f_int_p_q_const__float__double.getCPtr(statePotential), SWIGTYPE_p_f___void.getCPtr(onStepDone));
  }

  public virtual void update(SWIGTYPE_p_float currentState, SWIGTYPE_p_f_int_p_q_const__float_p_q_const__float_p_float__void transitionFwd, SWIGTYPE_p_f_int_p_q_const__float__double statePotential) {
    UnityOptimizationPluginPINVOKE.ControlPBP_update__SWIG_1(swigCPtr, SWIGTYPE_p_float.getCPtr(currentState), SWIGTYPE_p_f_int_p_q_const__float_p_q_const__float_p_float__void.getCPtr(transitionFwd), SWIGTYPE_p_f_int_p_q_const__float__double.getCPtr(statePotential));
  }

  public virtual double getSquaredCost() {
    double ret = UnityOptimizationPluginPINVOKE.ControlPBP_getSquaredCost(swigCPtr);
    return ret;
  }

  public virtual void getBestControl(int timeStep, SWIGTYPE_p_float out_control) {
    UnityOptimizationPluginPINVOKE.ControlPBP_getBestControl(swigCPtr, timeStep, SWIGTYPE_p_float.getCPtr(out_control));
  }

  public virtual void getBestControlState(int timeStep, SWIGTYPE_p_float out_state) {
    UnityOptimizationPluginPINVOKE.ControlPBP_getBestControlState(swigCPtr, timeStep, SWIGTYPE_p_float.getCPtr(out_state));
  }

  public virtual double getBestTrajectoryOriginalStateCost(int timeStep) {
    double ret = UnityOptimizationPluginPINVOKE.ControlPBP_getBestTrajectoryOriginalStateCost(swigCPtr, timeStep);
    return ret;
  }

  public virtual void setSamplingParams(SWIGTYPE_p_float controlPriorStd, SWIGTYPE_p_float controlDiffPriorStd, SWIGTYPE_p_float controlDiffDiffPriorStd, float controlMutationStdScale, SWIGTYPE_p_float stateKernelStd) {
    UnityOptimizationPluginPINVOKE.ControlPBP_setSamplingParams(swigCPtr, SWIGTYPE_p_float.getCPtr(controlPriorStd), SWIGTYPE_p_float.getCPtr(controlDiffPriorStd), SWIGTYPE_p_float.getCPtr(controlDiffDiffPriorStd), controlMutationStdScale, SWIGTYPE_p_float.getCPtr(stateKernelStd));
  }

  public virtual void startIteration(bool advanceTime, SWIGTYPE_p_float initialState) {
    UnityOptimizationPluginPINVOKE.ControlPBP_startIteration(swigCPtr, advanceTime, SWIGTYPE_p_float.getCPtr(initialState));
  }

  public virtual void startPlanningStep(int stepIdx) {
    UnityOptimizationPluginPINVOKE.ControlPBP_startPlanningStep(swigCPtr, stepIdx);
  }

  public virtual int getPreviousSampleIdx(int sampleIdx) {
    int ret = UnityOptimizationPluginPINVOKE.ControlPBP_getPreviousSampleIdx(swigCPtr, sampleIdx);
    return ret;
  }

  public virtual void getControl(int sampleIdx, SWIGTYPE_p_float out_control, SWIGTYPE_p_float priorMean, SWIGTYPE_p_float priorStd) {
    UnityOptimizationPluginPINVOKE.ControlPBP_getControl__SWIG_0(swigCPtr, sampleIdx, SWIGTYPE_p_float.getCPtr(out_control), SWIGTYPE_p_float.getCPtr(priorMean), SWIGTYPE_p_float.getCPtr(priorStd));
  }

  public virtual void getControl(int sampleIdx, SWIGTYPE_p_float out_control, SWIGTYPE_p_float priorMean) {
    UnityOptimizationPluginPINVOKE.ControlPBP_getControl__SWIG_1(swigCPtr, sampleIdx, SWIGTYPE_p_float.getCPtr(out_control), SWIGTYPE_p_float.getCPtr(priorMean));
  }

  public virtual void getControl(int sampleIdx, SWIGTYPE_p_float out_control) {
    UnityOptimizationPluginPINVOKE.ControlPBP_getControl__SWIG_2(swigCPtr, sampleIdx, SWIGTYPE_p_float.getCPtr(out_control));
  }

  public virtual void updateResults(int sampleIdx, SWIGTYPE_p_float finalControl, SWIGTYPE_p_float newState, double squaredStateCost, SWIGTYPE_p_float priorMean, SWIGTYPE_p_float priorStd) {
    UnityOptimizationPluginPINVOKE.ControlPBP_updateResults__SWIG_0(swigCPtr, sampleIdx, SWIGTYPE_p_float.getCPtr(finalControl), SWIGTYPE_p_float.getCPtr(newState), squaredStateCost, SWIGTYPE_p_float.getCPtr(priorMean), SWIGTYPE_p_float.getCPtr(priorStd));
  }

  public virtual void updateResults(int sampleIdx, SWIGTYPE_p_float finalControl, SWIGTYPE_p_float newState, double squaredStateCost, SWIGTYPE_p_float priorMean) {
    UnityOptimizationPluginPINVOKE.ControlPBP_updateResults__SWIG_1(swigCPtr, sampleIdx, SWIGTYPE_p_float.getCPtr(finalControl), SWIGTYPE_p_float.getCPtr(newState), squaredStateCost, SWIGTYPE_p_float.getCPtr(priorMean));
  }

  public virtual void updateResults(int sampleIdx, SWIGTYPE_p_float finalControl, SWIGTYPE_p_float newState, double squaredStateCost) {
    UnityOptimizationPluginPINVOKE.ControlPBP_updateResults__SWIG_2(swigCPtr, sampleIdx, SWIGTYPE_p_float.getCPtr(finalControl), SWIGTYPE_p_float.getCPtr(newState), squaredStateCost);
  }

  public virtual void endPlanningStep(int stepIdx) {
    UnityOptimizationPluginPINVOKE.ControlPBP_endPlanningStep(swigCPtr, stepIdx);
  }

  public virtual void endIteration() {
    UnityOptimizationPluginPINVOKE.ControlPBP_endIteration(swigCPtr);
  }

  public virtual void setParams(double uniformBias, double resampleThreshold, bool useGaussianBackPropagation, float gbpRegularization) {
    UnityOptimizationPluginPINVOKE.ControlPBP_setParams(swigCPtr, uniformBias, resampleThreshold, useGaussianBackPropagation, gbpRegularization);
  }

  public void gaussianBackPropagation(SWIGTYPE_p_f_int_p_q_const__float_p_q_const__float_p_float__void transitionFwd, SWIGTYPE_p_f___void onStepDone) {
    UnityOptimizationPluginPINVOKE.ControlPBP_gaussianBackPropagation__SWIG_0(swigCPtr, SWIGTYPE_p_f_int_p_q_const__float_p_q_const__float_p_float__void.getCPtr(transitionFwd), SWIGTYPE_p_f___void.getCPtr(onStepDone));
  }

  public void gaussianBackPropagation(SWIGTYPE_p_f_int_p_q_const__float_p_q_const__float_p_float__void transitionFwd) {
    UnityOptimizationPluginPINVOKE.ControlPBP_gaussianBackPropagation__SWIG_1(swigCPtr, SWIGTYPE_p_f_int_p_q_const__float_p_q_const__float_p_float__void.getCPtr(transitionFwd));
  }

  public void gaussianBackPropagation() {
    UnityOptimizationPluginPINVOKE.ControlPBP_gaussianBackPropagation__SWIG_2(swigCPtr);
  }

  public virtual int getBestSampleLastIdx() {
    int ret = UnityOptimizationPluginPINVOKE.ControlPBP_getBestSampleLastIdx(swigCPtr);
    return ret;
  }

  public float getGBPRegularization() {
    float ret = UnityOptimizationPluginPINVOKE.ControlPBP_getGBPRegularization(swigCPtr);
    return ret;
  }

}
